---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by tamer.
--- DateTime: 2019-04-04 15:59
---

---@class MLNTest @parent class
---@public field name string
---@type MLNTest
local MLNTest = {
    --- case 总数
    total = 0,
    --- 失败case数目
    error = 0,
    --- 成功case数目
    success = 0
}

--- 构造函数
-----@return MLNTest @may return MLNTest
function Test()
    local obj = {}
    setmetatable(obj, MLNTest)
    MLNTest.__index = MLNTest
    --- case 总数
    obj.total = 0
    --- 失败case数目
    obj.error = 0
    --- 成功case数目
    obj.success = 0
    return obj
end

--- 测试case
---@param condition  boolean case的判断条件
---@return MLNTest @may return MLNTest
function MLNTest:assert(condition)
    local case_idx = self.total + 1
    self.total = case_idx
    if condition then
        print("[TEST] case ", case_idx," success")
        self.success = self.success  + 1
    else
        print("[TEST] case ", case_idx," error")
        self:printCallStack()
        self.error = self.error + 1
    end
    return self
end

--- 测试case
---@param caseBlock  function case的所有操作,返回case的判断条件
---@return MLNTest @may return MLNTest
function MLNTest:assertCallback(caseBlock)
    local case_idx = self.total + 1
    self.total = case_idx
    local ret = caseBlock()
    if ret then
        print("[TEST] case ", case_idx," success")
        self.success = self.success  + 1
    else
        print("[TEST] case ", case_idx," error")
        self:printCallStack()
        self.error = self.error + 1
    end
    return self
end

--- 分析结果
---@return MLNTest @may return MLNTest
function MLNTest:analysis()
    local  resultTbl = {"[TEST] total ", tostring(self.total), ", error ", tostring(self.error), ", success ",
                        tostring(self.success)}
    local resultStr = table.concat(resultTbl)
    print(resultStr)
end

--- 复位重置状态
---@return MLNTest @may return MLNTest
function MLNTest:reset()
    --- case 总数
    self.total = 0
    --- 失败case数目
    self.error = 0
    --- 成功case数目
    self.success = 0
    return self
end

--- 获取堆栈
function  MLNTest:printCallStack()
    local startLevel = 3 --0表示getinfo本身,1表示调用getinfo的函数(printCallStack),2表示调用printCallStack的函数,3代表Assert
    local maxLevel = 10 --最大递归10层
    for level = startLevel, maxLevel do
        -- 打印堆栈每一层
        local info = debug.getinfo( level, "nSl")
        if info == nil then break end
        print( string.format("|- %s %-4d %-20s ", info.source or "", info.currentline, info.name or "") )
    end
end
