---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by XiongFangyu.
--- DateTime: 2019-06-18 15:00
---

local function assert_table(t1, t2, msg)
    local type1 = type(t1)
    assert(type1 == type(t2), msg..' type is not the same')
    if type1 ~= 'table' then
        assert(t1 == t2, msg..' is not the same')
        return
    end
    for k1, v1 in pairs(t1) do
        local v2 = t2[k1]
        assert_table(v1, v2, 'value for '..tostring(k1))
    end
end

---
--- called in child_thread_1
---
local function in_isolate(f,n, s, b, t)
    local isolate = require('isolate')
    assert(isolate.name() == 'child_thread_1',
            'isolate name is not right! name is :'..isolate.name()..', right name is :child_thread_1')

    f(n,s,b,t)

    local code, msg = isolate.callback(n,s,b,t)
    assert(code == 0, 'callback failed, code: '..tostring(code)..',message:'..msg)
end

local isolate = require('isolate')
assert(isolate.name() == 'main')

function inner_fun(n,s,b,t)
    local function assert_table_i(t1, t2, msg)
        local type1 = type(t1)
        assert(type1 == type(t2), msg..' type is not the same')
        if type1 ~= 'table' then
            assert(t1 == t2, msg..' is not the same')
            return
        end
        for k1, v1 in pairs(t1) do
            local v2 = t2[k1]
            assert_table_i(v1, v2, 'value for '..tostring(k1))
        end
    end

    assert(n == 1, 'n is '..tostring(n))
    assert(s == 'a', 's is '..s)
    assert(b)
    local data = {t={tt='tt', t2=2}, text="1", a='b', n=1, b=false, c=nil}
    assert_table_i(t, data, 'data')
end

local num = 1
local str = 'a'
local bool = true
local data = {t={tt='tt', t2=2}, text="1", a='b', n=1, b=false, c=nil}

local function callback(n,s,b,t)
    print('on callback',n,s,b,t,type(n))
    if type(n) == 'table' then
        print(n.name, n.code, n.msg)
    end
    --inner_fun(n,s,b,t)
end

local code = 0
local msg = nil
code, msg = isolate.registerCallback(callback)
assert(code == 0, 'registerCallback failed, code:'..tostring(code)..',message:'..msg)

--code, msg = isolate.create(in_isolate, "child_thread_1", inner_fun,num, str, bool, data)
--assert(code == 0, 'create failed, code:'..tostring(code)..',message:'..msg)

local function post_action(n,s,b,t)
    local isolate = require('isolate')
    print('post_action in', isolate.name())
    print('in post',n,s,b,t)
    require('print_table').print_r(t)
    --if isolate.name() == 'global_1' then
        isolate.closeSelf(true)
    --end
    return n,s
end

code, msg = isolate.openGlobal('global_1')
assert(code == 0, 'create failed, code:'..tostring(code)..',message:'..msg)

code, msg = isolate.post('global_1', true, post_action, num, str, bool, data)
while code ~= 0
do
    code, msg = isolate.post('global_1', true, post_action, num, str, bool, data)
end

local v = Label():text('close global')
v:onClick(function ()
    isolate.post('global_1', function ()
        local iso = require('isolate')
        iso.closeSelf(true)
    end)
end)
window:addView(v)