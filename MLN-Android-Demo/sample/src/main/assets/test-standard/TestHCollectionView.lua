---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by XiongFangyu.
--- DateTime: 2018/12/4 上午10:39
---

datasouce = {
    headIconName = "http://img.momocdn.com/album/4F/CF/4FCFA0D2-95E8-3C09-3760-142E6916CA1B20170701_S.jpg",
    summary = "安全等级：高",
    sections = {
        {
            sectionTitle = "通过以下设置可以提高安全等级",
            items = {

            }
        },

    }
}
local normalCell = require("cells.MomentNormalCell")
local size = window:size()
screen_w = window:width()
screen_h = window:height()

Toast(tostring(screen_h) .. ":" .. tostring(screen_w), 1)
local collectionView = nil
local direction = ScrollDirection.VERTICAL

local lineEdit = EditTextView():placeholder("LineSpace"):fontSize(16):textAlign(TextAlign.CENTER):width(70):height(60):padding(5, 5, 5, 5)
lineEdit:x(screen_w - 100):y(100):bgColor(Color(211, 211, 211, 1)):textColor(Color(0, 0, 0, 1)):inputMode(EditTextViewInputMode.Number)

local itemEdit = EditTextView():placeholder("itemSpace"):fontSize(16):textAlign(TextAlign.CENTER):width(70):height(60):padding(5, 5, 5, 5)
itemEdit:x(screen_w - 100):y(170):bgColor(Color(211, 211, 211, 1)):textColor(Color(0, 0, 0, 1)):inputMode(EditTextViewInputMode.Number)

function fillCollectionView(change)

    local lineSpacing = 0
    local itemSpace = 0
    local halfH = 0
    local halfW = 0

    local linevalue = lineEdit:text()
    local itemValue = itemEdit:text()
    if linevalue ~= "" and linevalue then
        lineSpacing = tonumber(linevalue)
    end
    if itemValue ~= "" and itemValue then
        itemSpace = tonumber(itemValue)
    end
    print("keye he", lineSpacing, itemSpace)

    if collectionView then
        collectionView:removeFromSuper()
    end
    collectionView = CollectionView(true, true)
    if change then
        if direction == ScrollDirection.HORIZONTAL then
            direction = ScrollDirection.VERTICAL
        else
            direction = ScrollDirection.HORIZONTAL
        end
    end

    if direction == ScrollDirection.HORIZONTAL then
        halfH = (screen_h-lineSpacing) / 3 - lineSpacing
        halfW = screen_w / 5
    else
        halfH = screen_h / 3
        halfW = (screen_w-itemSpace) / 5 - itemSpace
    end
    print("keye halfW H", halfW, halfH)
    collectionView:scrollDirection(direction)

    collectionView:width(screen_w):height(screen_h)
    window:addView(collectionView)

    local layout = CollectionViewLayout()
    layout:lineSpacing(lineSpacing)
    layout:itemSpacing(itemSpace)
    layout:itemSize(Size(halfW, halfH))
    --layout:itemSize(Size(halfW, 100))
    collectionView:layout(layout)
    local adapter = CollectionViewAdapter()
    adapter:sectionCount(function()
        return 1
    end)
    adapter:rowCount(function(section)
        local sections = datasouce.sections;
        --找到对应的组
        return #sections[section].items
    end)
    adapter:reuseId(function(section, row)
        return "1"
    end)
    adapter:initCellByReuseId("1",function(cell, section, row)
        normalCell:onCreate(cell, nil)
    end)
    adapter:fillCellDataByReuseId("1",function(cell, section, row)
        local section = datasouce.sections[section]
        local items = section.items;
        local detailItem = items[row]
        normalCell:onLayout(cell, detailItem)
    end)
    adapter:sizeForCell(function(s, r)
        return Size(halfW, halfH)
        --return Size(halfW, h)
    end)
    collectionView:adapter(adapter)

    collectionView:setRefreshingCallback(function()
        print('开始刷新')
        TimeManager:setTimeOut(function()
            print("timer 完成")
            collectionView:stopRefreshing()
            collectionView:resetLoading()
            local g = require('cells.ItemGenerator')
            local items = datasouce.sections[1].items
            local old = #items + 1
            g:insert(items, 10)
            --collectionView:reloadData()
            collectionView:insertCellsAtSection(1, old, 9 + old)
            --collectionView:noMoreData()
            --collectionView:loadEnable(false)
            collectionView:reloadData()
        end, 1)
    end)
    collectionView:setLoadingCallback(function()
        print('开始加载')
        TimeManager:setTimeOut(function()
            local g = require('cells.ItemGenerator')
            local items = datasouce.sections[1].items
            local old = #items + 1
            g:insert(items, 10)
            --collectionView:reloadData()
            collectionView:insertCellsAtSection(1, old, 9 + old)
            collectionView:stopLoading()
            --collectionView:noMoreData()
            --collectionView:loadEnable(false)
        end, 1)
    end)

    collectionView:startRefreshing()
end

local reload = Label():text("Reload"):fontSize(16):textAlign(TextAlign.CENTER):width(70):height(60):padding(5, 5, 5, 5)
reload:x(screen_w - 80):y(220):bgColor(Color(21, 21, 21, 1)):textColor(Color(255, 255, 255, 1))

local btn = Label():text("切换方向"):fontSize(16):textAlign(TextAlign.CENTER):width(70):height(60):padding(5, 5, 5, 5)
btn:x(screen_w - 80):y(50):bgColor(Color(21, 21, 21, 1)):textColor(Color(255, 255, 255, 1))
btn:onClick(function()
    fillCollectionView(true)
    btn:removeFromSuper()
    reload:removeFromSuper()
    lineEdit:removeFromSuper()
    itemEdit:removeFromSuper()
    window:addView(btn)
    window:addView(reload)
    window:addView(lineEdit)
    window:addView(itemEdit)
end)
reload:onClick(function()
    fillCollectionView(false)
    btn:removeFromSuper()
    reload:removeFromSuper()
    lineEdit:removeFromSuper()
    itemEdit:removeFromSuper()
    window:addView(btn)
    window:addView(reload)
    window:addView(lineEdit)
    window:addView(itemEdit)
end)

fillCollectionView(false)

window:addView(btn)
window:addView(reload)
window:addView(lineEdit)
window:addView(itemEdit)
