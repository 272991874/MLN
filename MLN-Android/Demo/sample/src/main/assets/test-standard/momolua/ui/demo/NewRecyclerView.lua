---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by David.
--- DateTime: 2018/5/14 下午12:25
---



datasouce = {
    headIconName = "http://img.momocdn.com/album/4F/CF/4FCFA0D2-95E8-3C09-3760-142E6916CA1B20170701_S.jpg",
    summary = "安全等级：高",
    sections = {
        {
            sectionTitle = "通过以下设置可以提高安全等级",
            items = {

            }
        },

    }
}
local normalCell = require("cells.ViewPagerCell")
local size = window:size()
screen_w = size:width()
screen_h = size:height()
--local vp = ViewPager()
--local adapter = ViewPagerAdapter()
--adapter:getCount(function ()
--    return 3;
--end)
--adapter:initCell(function(cell,position)
--    normalCell:onCreate(cell)
--end)
--adapter:fillCellData(function (cell, position)
--    normalCell:onLayout(cell,'http://pic24.photophoto.cn/20120730/0036036815619480_b.jpg')
--end)
--vp:autoScroll(true):recurrence(true)
--vp:width(screen_w-10)
--vp:height(100)
--vp:showIndicator(true)
--vp:adapter(adapter)


local headerview = Label()
headerview:width(screen_w)
headerview:height(100)
headerview:text('header')
headerview:bgColor(Color(255,255,0,1))

local headerview2 = Label()
headerview2:width(screen_w)
headerview2:height(100)
headerview2:text('header2')
headerview2:bgColor(Color(255,0,0,1))
headerview2:cornerRadius(8)

local collectionView = WaterfallView(true, true)
collectionView:useAllSpanForLoading(true)
--collectionView:addHeaderView(vp)

collectionView:addHeaderView(headerview)
collectionView:addHeaderView(headerview2)
local adapter = WaterfallAdapter()
adapter:cellDidDisappear(function (cell, section, row)
    --print('cell disappear', cell, section, row)
end)
adapter:cellWillAppear(function (cell, section, row)
    print('cell appear', cell, section, row)
end)
adapter:headerDidDisappear(function ()
    print('header disappear')
end)
adapter:headerWillAppear(function ()
    print('header Appear')
end)
adapter:reuseId(function (section, row)
    if row == 1 then
        return "1"
    end
    return "2"
end)
adapter:initCellByReuseId('1', function (cell)
    cell.vp = ViewPager()
    local adapter = ViewPagerAdapter()
    adapter:getCount(function ()
        return 3;
    end)
    adapter:initCell(function(cell,position)
        normalCell:onCreate(cell)
    end)
    adapter:fillCellData(function (cell, position)
        local g = require('cells.ItemGenerator')
        normalCell:onLayout(cell,g.imgs[position])
    end)
    cell.vp:cellWillAppear(function (c,p)
        --print('cellWillAppear ',p)
        --collectionView:reloadData()
    end)
    cell.vp:cellDidDisappear(function (c,p)
        --print('cellDidDisappear ', p)
    end)
    cell.vp:endDragging(function (p)
        --print('endDragging ', p)
    end)
    cell.vp:autoScroll(true):recurrence(true):setMatchParent(true):frameInterval(2.5)
    cell.vp:showIndicator(true)
    cell.vp:adapter(adapter)
    cell.contentView:addView(cell.vp)
end)
adapter:fillCellDataByReuseId('1', function (cell)
    cell.vp:reloadData()
end)
adapter:initCellByReuseId('2', function (cell)
    local normalCell = require("cells.MomentNormalCell")
    normalCell:onCreate(cell,nil)
end)
adapter:fillCellDataByReuseId('2',function (cell,section,row)
    local normalCell = require("cells.MomentNormalCell")
    local section = datasouce.sections[section]
    local items = section.items;
    local detailItem = items[row]
    normalCell:onLayout(cell,detailItem)
end)
adapter:sectionCount(function ()
    return #datasouce.sections
end)
adapter:rowCount(function (section)
    local sections = datasouce.sections;
    --找到对应的组
    return #sections[section].items
end)
adapter:selectedRow(function (cell,section,row)
    print('onclick', section,row)
    collectionView:removeHeaderView()
end)
adapter:heightForCellByReuseId('2',function (section,row)
    local section = datasouce.sections[section]
    local items = section.items;
    return items[row].height
end)
adapter:heightForCellByReuseId('1', function (s, r)
    return 100
end)
local layout = WaterfallLayout()
layout:lineSpacing(5)
layout:itemSpacing(10)
layout:spanCount(2)
collectionView:layout(layout)
collectionView:adapter(adapter)
collectionView:setRefreshingCallback(function ()
    print('开始刷新')
    TimeManager:setTimeOut(function ()
        print("timer 完成")
        collectionView:stopRefreshing()
        collectionView:resetLoading()
        collectionView:reloadData()
    end, 0.01 )
end)
collectionView:setLoadingCallback(function ()
    print('开始加载')
    TimeManager:setTimeOut(function ()
        local g = require('cells.ItemGenerator')
        local items = datasouce.sections[1].items
        local old = #items + 1
        g:insert(items, 10)
        collectionView:reloadData()
        collectionView:insertCellsAtSection(1, old, 9 + old)
        collectionView:stopLoading()
        --collectionView:noMoreData()
        --collectionView:loadEnable(false)
    end, 1)
end)
collectionView:setScrollingCallback(function ()
    --print('滚动中')
end)
collectionView:setScrollBeginCallback(function ()
    --print('开始滚动')
end)
collectionView:setScrollEndCallback(function ()
    --print('滚动结束')
end)
print("size ", screen_w, screen_h)
collectionView:frame(Rect(0,0,screen_w,screen_h))
window:addView(collectionView)
collectionView:showScrollIndicator(true)
--collectionView:addHeaderView(headerview)
--collectionView:reload()
--local timer = Timer(function ()
--    print("timer 完成")
--    collectionView:startRefreshing()
--end )
--timer:delay(1)
--timer:start()